archetype switch(
  owner : address,
  rate  : rational
)

variable endofservice    : date = now
variable startofservice  : date = now

variable time_unit : duration = 1m
variable tez_unit : tez = 1tz

variable user : option<address> = none

variable read_interval : duration = 5s

function get_rate_in_s_by_utz () : rational {
  var d : int = time_unit;
  var t : nat = tez_unit;
  return (rate * d / t)
}

function get_return_tz () : tez {
  var res : int = 1 / get_rate_in_s_by_utz() * (endofservice - now);
  return (res * 1utz)
}

entry start () {
  require { r1: now > endofservice }
  effect {
    var t : nat = transferred;
    var dur : duration = (get_rate_in_s_by_utz() * t)*1s;
    if dur > read_interval then begin
      endofservice   := now + dur + read_interval;
      startofservice := now;
      user := some(caller)
    end
  }
}

entry interrupt () {
  require { r2: caller = opt_get(user) and now < endofservice }
  effect {
    transfer (get_return_tz()) to caller;
    endofservice   := now - read_interval;
    startofservice := now - read_interval;
  }
}

entry collect () {
  called by owner
  effect {
    var keep = 0tz;
    if now < endofservice then
      keep := get_return_tz();
    if balance - keep > 0tz then
      transfer (balance - keep) to owner
  }
}

entry setunits (dunit : duration, tunit : tez) {
  called by owner
  effect {
    time_unit := dunit;
    tez_unit  := tunit;
  }
}

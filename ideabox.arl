archetype ideasbox(chairman : address, maxvotes : nat)

states =
| Activated initial
| Terminated

asset idea {
  id       : nat;
  title    : bytes;
  desc     : bytes;
  nbvotes  : nat = 0;
  creation : date;
  author   : address;
}

asset voter {
  addr      : address;
  remaining : nat = maxvotes;
}

asset selected {
  sid : nat;
}

entry register (a_voter : address) {
  called by chairman
  require {
    r0 : state = Activated;
  }
  effect { voter.add({ addr = a_voter }) }
}

entry add_idea(ititle : bytes, description : bytes) {
  require {
    r1 : state = Activated;
  }
  effect {
    idea.add({
      id       = idea.count();
      title    = ititle;
      desc     = description;
      creation = now;
      author   = caller
    })
  }
}

entry vote(n : nat, weight : nat) {
  require {
    r2 : voter.contains(caller);
    r3 : voter[caller].remaining >= weight;
    r4 : state = Activated;
  }
  effect {
    voter[caller].remaining -= weight;
    idea[n].nbvotes += weight;
  }
}

transition terminate () {
  called by chairman
  from Activated
  to Terminated
  with effect {
    for i in idea.select(the.nbvotes > maxvotes).sort(desc(nbvotes)).head(3) do
        selected.add({i})
    done
  }
}

specification {
  i1 : maxvotes * voter.count() = idea.sum(nbvotes) + voter.sum(remaining)
}

specification entry add_idea(ititle : bytes, description : bytes) {
  fails {
    add_idea_f1 with (msg : string) :
      msg = "InvalidState" and
      state <> Activated;
    add_idea_f2 with (msg : string) :
      msg = "KeyAlreadyExists" and
      false;
  }
  postcondition add_idea_p1 {
    forall i in added.idea, i.id = before.idea.count() and
    added.idea.count() = 1
  }
}

specification entry register(a_voter : address) {
  fails {
    register_f1 with (msg : string) :
      msg = "InvalidState" and
      state <> Activated;
    register_f2 with (msg : string) :
      msg = "InvalidCaller" and
      caller <> chairman;
    register_f3 with (msg : string) :
      msg = "KeyAlreadyExists" and
      voter.contains(a_voter);
  }
  postcondition register_p1 {
    forall v in added.voter, v.addr = a_voter and
    added.voter.count() = 1
  }
}

specification entry vote (n : nat, weight : nat) {
  fails {
    f0 with (msg : string) :
      msg = "GetNoneValue" and
      (not voter.contains(caller) or not idea.contains(n));
    f1 with (msg : string) :
      let some v = voter[caller] in
        v.remaining < weight
      otherwise true;
    f2 with (msg : string) :
      msg = "InvalidState" and
      state <> Activated;
  }
  postcondition p1 {
    let some v = voter[caller] in
    let some bv = before.voter[caller] in
      v.remaining = bv.remaining - weight
    otherwise true otherwise true
  }
  postcondition p2 {
    let some i = idea[n] in
    let some bi = before.idea[n] in
      i.nbvotes = bi.nbvotes + weight
    otherwise true otherwise true
  }
}

specification entry terminate () {
  postcondition p3 {
    before.state = Activated ->
    selected.count() <= 3
  }
  postcondition p4 {
    before.state = Activated ->
    forall s in selected,
      let some i = idea[s.sid] in
        i.nbvotes > maxvotes and
        forall o in idea,
          not selected.contains(o.id) ->
          o.nbvotes <= i.nbvotes
      otherwise false
  }
}

